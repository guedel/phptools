@startuml

namespace controls {

enum DataType {
  dtMixed
  dtInteger
  dtFloat
  dtString
  dtEnum
  dtObject
}

class Option {
  + string name
  + string label
  + DataType type
  + string extra
  + bool required
  + mixed default
  + mixed value

  + <<create>> Option(string name, string label, bool required = false, DataType type =  dtString, mixed extra = null, mixed default = null)
}
note bottom: Determine un attribut d un controle

OptionCollection *--> "0..*" Option
class OptionCollection {
  + <<create>> OptionCollection()
  + integer getCount()
	+ Option getOption(string name)
  + Option addOption(name, label, type, required, default)
  + Option addEnumOption(string name, string label, mixed enumeration, bool required, mixed default)
  + addOption(Option option)
}

Widget ...>  OptionCollection : use
abstract class Widget {
	~ OptionCollection options
  + mixed id

	+ <<create>> Widget()
	~ {abstract} initOptionList()
}

WidgetCollection o--> "0..*" Widget
class WidgetCollection {
  + integer getCount()
  + mixed addWidget(Widget widget, mixed index = null)
  + removeWidget(mixed index)
  + getWidget(mixed index)
}


Widget <|-- Container
Container ...> WidgetCollection : use
abstract class Container {
  ~ WidgetCollection childs
  + WidgetCollection getChilds()
}

Container <|-- Form
abstract class Form {
  + <<create>> Form()
}

Widget <|-- Control
abstract class Control {
  + string name

  <<create>> Control()
}

ControlCollection o--> "0..*" Control 
class ControlCollection {
  + integer getCount()
  + mixed addControl(Control control)
  + getControl(mixed index)
  + boolean removeControl(mixed index)
}

Control <|-- Textbox 
class Textbox {
	+ <<create>> Textbox()
}

Control <|-- Checkbox 
class Checkbox {
	+ <<create>> Checkbox()
}

Control <|-- Listbox 
class Listbox {
	+ <<create>> Listbox()
}


namespace generation {
  class CodeWriter {
    - string current
    - string lines[]
    - int indent
    + string spacer = '\\t'
    
    + <<create>> CodeWriter(string spacer="\\t", string initialIndent = 0)
    + indent()
    + unindent()
    + write(string text)
    + writeln(string text)
    + nl()
    + string render()
    + merge(CodeWriter writer)
  }

  enum OutputMode {
    output_html
    output_php5
    output_symfony_form
    output_ajax
    output_text
    output_twig_template
    output_volt_template
  }

  class Generator {
     
    + <<create>> Generator()
    + register_control_generator(WidgetClass, WidgetWriter)
  }

  abstract class WidgetWriter {
    - WidgetWriter next
    + WidgetWriter setNext(WidgetWriter writer)
    + void render(Widget ctrl)
  }

}

@enduml
