paquet composants
début
    énumération TypeDonnéee
    début
        "quelconque"
        "énuméré"
        "texte"
        "entier"
        "décimal"
        "booléen"
        "requete"
        "objet"
    fin

fin;

algorithme stratégie_stockage_options_par_pont
début
    /*
     * Principe de l'algorithme:
     * 
    */

    {abstraite}
    classe StockageOption
    début
        procédure écrire(option: Option);
        procédure lire(option : référence de Option);
    fin
    
    /*
     * Dans cette classe on crée un contrôle pour saisir la valeur de l'option
    */
    classe StockageOptionSaisieHtml étend StockageOption
    début
        var visible : booléen
        
        {public}
        constructeur StockageOptionSaisieHtml(visible : booléen = vrai)
        début
            ceci.visible = visible
        fin
        
        {privé}
        fonction getNomHtml(nom : chaine): chaine
        début
            retourne nom
        fin
    
        {publique}
        procédure écrire(option: Option)
        début
            selon option.typeDonnée
                cas "texte" alors
                    // création Textbox
                cas "entier" alors
                    // création Spin
                cas "décimal" alors
                    // Textbox
                cas "booléen" alors
                    // checkbox
                cas "énuméré" alors
                    // dropdown
                ...
           finselon ;
        fin
        
        {publique}
        procédure lire(option : référence de Option)
        début
            var nom_utilisé : chaine <- ceci.getNomHtml(option.nom)
            si existe _requete[nom_utilisé] alors
                option.valeur <- _requete[nom_utilisé]
        fin
    fin
    
    classe StockageOptionEnBase étend StockageOption
    début
        {publique}
        procédure écrire(option: Option)
        début
            tableOption.insère option.nom, option.typeDonnée, option.valeur
        fin

        {publique}
        procédure lire(option : référence de Option)
        début
            tableOption.lire option.valeur, option.typeDonnée où id=option.nom
        fin
    fin
    
    {abstraite}
    classe Option 
    début
        {publique}
        var nom : chaine
        var typeDonnée : TypeDonnée
        var valeur: quelconque
        
        {privée}
        var controle : Controle
        
        {publique}
        constructeur Option(un_nom: chaine, un_type : TypeDonnée)
        début
            ceci.nom <- un_nom;
            ceci.typeDonnée <- un_type;
        fin
        
        procédure enregistrer();
        procédure récupérer();
        
    fin
fin

algorithme stockage_widget
début
    importe composants.*;
    
    {abstraite}
    classe Widget
    début
        var id : chaine
    fin
    
    classe WidgetRenderer
    début
        constructeur WidgetRenderer(widget : Widget);
        procédure render() // Lance une exception en cas d'échec
    fin

    classe WidgetRendererRegister
    début
        var renderers : Collection<WidgetClass, RendererClass>
    fin
    
    // exemple de rendu d'un textbox pour le HTML
    classe HtmlTextboxRenderer étend WidgetRenderer
    début
        {privée}
        var content : Controles.Textbox
        constructeur HtmlTextboxRenderer(ctl : Controles.Textbox)
        début
            ceci.content <- ctl;
        fin
        
        {publique}
        procédure render()
        début
            écrire formate("<input id='%1' name='%2' type='text' value='%3' />", ceci.content.id, ceci.content.nom, ceci.content.valeur);
        fin
    fin
    
fin