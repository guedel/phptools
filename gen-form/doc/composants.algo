paquet composants
début
    interface IAccepteVisiteur
    début
        procédure accepte(visiteur: Visiteur);
    fin

    {abstraite}
    classe Composant
    début
        var id: quelconque
    fin
    
    classe Projet
    début
        var source : quelconque // nom de fichier, jeu de table dans une base, etc. A définir
        
        var formulaires: collection de Form
        var connexions: collection de Connection
    fin

    /*
     * Classe de pilote de base de données
    */
    {abstraite}
    classe Pilote 
    début
        fonction OuvreConnexion(...) : Connection
        // Récupère la liste des schémas
        fonction getSchemas() : tableau de chaine
        // Récupère la liste des tables d'un schéma
        fonction getTables(schema : chaine) : tableau de chaine
        // Récupère la liste des noms de colonne d'une table
        fonction getColumns(schema: chaine, tablename: chaine): tableau de chaine
    fin
    
    classe Connection étend Composant
    début
        var driver, nomhote : chaine
        var  port: entier
        var utilisateur, motpasse, schema : chaine
        
        // dépend du pilote de base de données
        fonction getSchemas() : tableau de Schema;
    fin
    
    classe Schema
    début
        var nom : chaine
        var connection : Connection
        
        {publique}
        constructeur Schema(nom: chaine, cn : Connection)
        début
            ceci.nom <- nom
            ceci.connection <- cn
        fin

        // dépend du pilote
        // retourne la liste des tables disponibles dans le schéma
        {publique}
        fonction getTables() : tableau de chaine;
    fin
    
    classe Query étend Composant
    début
        // ou l'un ou l'autre
        var nomtable, sql : chaine
        // schéma de référence pour la requête
        var schemaDepart: Schema
    fin
    
    classe Column étend Composant
    début
        var query : Query
       
        constructeur Column(query : Query)
        début
            ceci.query <- query
        fin
    fin
    
    classe Form étend Composant
    début
        var requete: Query
        var controles : collection de Control
    fin

    {abstraite }
    classe Control étend Composant
    début
        // champ auquel le controle fait référence
        var champ : Colonne
    fin
    
    énumération TypeOption
    début
        "texte"
        "entier"
        "décimal"
        "booléen"
        "requête"
        "énumération"
        "objet"
    fin

    classe Option
    début
        { privée }
        variable
            nom : chaine
            libellé: chaine
            typeOption : TypeOption
            requis: booléen
            défaut: quelconque
            valeur: quelconque
            // imformation complémentaire en fonction du type de données
            extra: quelconque
            
        { public }
        constructeur Option(nom : chaine, libellé = chaine, requis : booléen = faux, typeOption : TypeOption = "texte", , défaut = null, extra = null)
        début
            ceci.nom <- nom
            ceci.libellé <- libellé
            ceci.requis <- requis
            ceci.typeOption <- typeOption
            ceci.défaut <- défaut
            ceci.extra <- extra
            ceci.valeur <- ceci.defaut
        fin
        
        fonction getLibellé()
        début
            // comportement par défaut
            // Voir pour passer par un outil de traduction
            retourne ceci.libellé
        fin
        
        // Normalement Option et valeur de l'option sont deux choses distinctes
        fonction getValeur() : quelconque
        début
            retourne ceci.valeur
        fin
        
        procédure setValeur(v : quelconque)
        début
            ceci.valeur <- v
        fin
        
    fin
    
    classe FabriqueOption
    début
        fonction créeOption(...) : Option;
        fonction créeOptionEnumérée(...) : Option;
    fin
    
    /*
      Permet de définir une méthode de persistence pour un composant
    */
    {abstraite}
    classe Persistence 
    début
        var parent : Persistence
        
        constructeur Persistence(parent : Persistence = null)
        début
            ceci.parent <- parent
        fin
        
        // Entame l'opération de persistence
        procédure commence()
        début
            si parent <> null alors
                parent.commence()
        fin
        
        // Procédure d'écriture d'une information
        {abstraite}
        procédure injecte(nom : chaine, valeur : quelconque, typeValeur: chaine = "texte");
        
        // Procédure de lecture d'une information
        {abstraite}
        fonction extrait(nom : chaine, typeValeur : chaine = "texte") : quelconque;
        
        // termine l'opération de persistence
        procédure termine();
        début
            si non parent est null alors
                parent.termine()
        fin
        
        procédure annule();
        début
            si non parent est null alors
                parent.annule()
        fin
    fin
    
    /* 
     * Visite l'arborescence des composants du paquet
    */
    {abstraite}
    classe Visiteur
    début
        procédure visiteComposant(c : Composant);
        procédure visiteConnection(c : Connection);
        procédure visiteSchema(s : Schema);
        procédure visiteQuery(q : Query);
        procédure visiteForm(f : Form);
        procédure visiteControle(c : Control);
        procédure visiteOption(o : Option);
    fin
    
    
    paquet Control 
    début
        classe Textbox étend Control
        début
        fin
        
        // Pareil pour les autres controles
        ...
    fin
    
    paquet Génération
    début
        classe GénérationHTML étend ComposantsVisiteur
        début
            procédure visiteComposant(c : Composant)
            début
            fin
            
            procédure visiteConnection(c : Connection)
            début
                var f : Form
                pour chaque f dans c.formulaires
                    f.accept ceci
            fin
            
            procédure visiteSchema(s : Schema)
            début
            fin
            
            procédure visiteQuery(q : Query)
            début
            fin
            
            procédure visiteForm(f : Form)
            début
            fin
            
            procédure visiteControle(c : Control)
            début
            fin
            
            procédure visiteOption(o : Option)
            début
            fin
        fin
    fin
fin

